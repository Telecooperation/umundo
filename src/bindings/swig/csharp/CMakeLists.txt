# unset all library suffixes as swig will hardcode a library without
SET(LIB_POSTFIX ${CMAKE_LIBRARY_POSTFIX})

SET(CMAKE_DEBUG_POSTFIX "")
SET(CMAKE_RELEASE_POSTFIX "")
SET(CMAKE_RELWITHDEBINFO_POSTFIX "")
SET(CMAKE_MINSIZEREL_POSTFIX "")
SET(CMAKE_LIBRARY_POSTFIX "")

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
if (MSVC)
	# MSVC does not include inttypes.h but SWIG needs it
	include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../msvc)
endif()

SET(CMAKE_SWIG_FLAGS "")
SET(UMUNDO_CSHARP_NAMESPACE "org.umundo")
SET(UMUNDO_CSHARP_DIR "org/umundo")

# if (HOST_64BIT)
# 	list(APPEND CMAKE_SWIG_FLAGS "-DHOST_64BIT")
# endif()
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	list(APPEND CMAKE_SWIG_FLAGS "-DDEBUG")
endif()

# we need ; to produce a space with the package .. weird
SET_SOURCE_FILES_PROPERTIES(umundo.i PROPERTIES SWIG_FLAGS "-w401;-namespace;${UMUNDO_CSHARP_NAMESPACE}")
SET_SOURCE_FILES_PROPERTIES(umundo.i PROPERTIES CPLUSPLUS ON)
SET(CMAKE_SWIG_OUTDIR "${CMAKE_CURRENT_BINARY_DIR}/${UMUNDO_CSHARP_DIR}")

SWIG_ADD_MODULE(umundoNativeCSharp csharp umundo.i)
set_target_properties(umundoNativeCSharp PROPERTIES FOLDER "Bindings")

set_target_properties(umundoNativeCSharp
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/csharp${LIB_POSTFIX}"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/csharp${LIB_POSTFIX}"
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/csharp${LIB_POSTFIX}"
)

# if (HOST_64BIT)
# 	set_target_properties(umundoNativeCSharp PROPERTIES COMPILE_FLAGS "-DHOST_64BIT")
# endif()

# if (CMAKE_BUILD_TYPE MATCHES ".*Deb.*")
# 	set_target_properties(umundoNativeCSharp PROPERTIES OUTPUT_NAME umundoNativeCSharp_d) 
# endif()

# I am not sure why we need it twice, but we do at least on android
SWIG_LINK_LIBRARIES(umundoNativeCSharp umundo)
# SWIG_LINK_LIBRARIES(umundoNativeCSharp ${UMUNDO_LIBRARIES} ${UMUNDOUTIL_LIBRARIES})

INSTALL_LIBRARY(TARGETS umundoNativeCSharp COMPONENT librarySwig DESTINATION share/umundo/bindings/csharp${LIB_POSTFIX})
